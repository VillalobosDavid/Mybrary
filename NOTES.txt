How To Install Node.js:  https://youtu.be/VShtPwEkDD0
How To Install MongoDB:  https://youtu.be/wcx3f0eUiAw
Learn Git In 20 Minutes: https://youtu.be/IHaTbJPdB-s

LOCAL-PC ==> GitHub Server ==> Heroku Server ==> MongoDB Server
1. LOCAL-PC:       Development Environment.
2. GitHub Server:  Repository Server.
3. Heroku Server:  Web Server.
4. MongoDB Server: Non-SQL Database Server.

**********************************************************************************
IMPORTANT NOTE: In Routes "redirect" means to redirect to same ROUTE module and
                "render" means to redirect to VIEW module.
**********************************************************************************

**********************************************************************************
Project Setup - Node.js/Express/MongoDB Course #1:
URL: "https://www.youtube.com/watch?v=qj2oDkvc4dQ"
**********************************************************************************
In this video we will be setting up the base of our project by:
1. Setting up Express
2. Hooking up MongoDB
3. Setting up local ENV variables
4. Creating a base layout HTML file
5. Setting up our MVC folder structure
**********************************************************************************
01. Initialize Project:
    A. ==> init npm
02. Install Required Packages:
    A. ==> npm install express              (server)
       I. Fast, un-opinionated, minimalist web framework for node.
    B. ==> npm install ejs                  (template language)
       I. Embedded JavaScript templates.
    C. ==> npm install express-ejs-layouts  (for creating HTML Layouts)
       I. Layout support for "ejs" (Embedded JavaScript templates) in express.
03. Install Development Packages:
    A. ==> npm install --save-dev nodemon   (for refreshing server)
       I. "nodemon" is a tool that helps develop node.js based applications by automatically 
          restarting the node application when file changes in the directory are detected.
04. Modify "package.json" to create scripts to run servers:
    A."start": "node server.js"             (for Production Running)
    B."devStart": "nodemon server.js"       (for Development Running)
05. Running server:
    A. ==> npm run start                    (for Production Running)
    B. ==> npm run devStart                 (for Development Running)
06. Explanation of Project Folders:
    A. "public" folder where all PUBLIC           files will be stored.
    B. "views"  folder where all VIEW             files will be stored.
    C. "routes  folder where all ROUTE/CONTROLLER files will be stored.
    D. "models  folder where all DATABASE MODEL   files will be stored.
07. Explanation of Project Files:
    A. "server.js":                 Entry point of application.
    B. "routes/index.js":           Where all DEFAULT application routes get defined.
    C. "views/layouts/layout.ejs":  Boiler plate HTML for ALL Pages in Application. 
                                   (Other pages will get Rendered in "<%- body %>" Element).
08. Install MongoDB Package:
    "Mongoose" is a MongoDB object modeling tool designed to work in an asynchronous environment.
    Mongoose supports both promises and callbacks.
    A. ==> npm install mongoose
    B. IMPORTANT: URL for local Mongoose Database "127.0.0.1:27017"
09. Install Dotenv Development Package:
    "Dotenv" is a zero-dependency module that loads environment variables from a .env file into 
    process.env. Storing configuration in the environment separate from code is based on The 
    Twelve-Factor App methodology.
    A. ==> npm install --save-dev dotenv
    B. Create a ".env" file in ROOT Directory and create entrie(s).
       I. DATABASE_URL = "mongodb://127.0.0.1:27017/mybrary"
10. Initialize Git Repository for Project:
    A. ==> git init (Create an empty Git repository or reinitialize an existing one)
    B. Create a ".gitignore" file to declare all files and directories that DO NOT want be 
       included when saving project to repository.
    C. ==> 'git add .' (Add file contents to the index)
    D. ==> git commit -m "Commit-Comment" (Record changes to the repository)
    E. Go to GitHub and create a new repository for the project, call it "Mybrary".
    D. Push an existing repository from the command line
       ==> git remote add origin https://github.com/VillalobosDavid/Mybrary.git
       ==> git push -u origin master
10. Creating and Uploading Project to Heroku:
    A. Create New App in Heroku website
       I. Called it "mybrary-dv"
    B. Install the Heroku CLI (Follow instructions in website)
       I. URL: https://devcenter.heroku.com/articles/heroku-cli#download-and-install
    C. log in to your Heroku account and follow the prompts to create a new SSH public key.
       I.   ==> heroku login
    D. Create a new Git repository (If Necessary)
       I.   ==> cd my-project/                      (DONE IN STEP 10)
       II.  ==> git init                            (DONE IN STEP 10)
       III. ==> heroku git:remote -a mybrary-dv
    E. Deploy your application
       I.   ==> 'git add .'                         (DONE IN STEP 10)
       II.  ==> git commit -am "make it better"     (DONE IN STEP 10)
       III. ==> git push heroku master
    F. Existing Git repository (For existing repositories, simply add the heroku remote)
       I.   ==> heroku git:remote -a mybrary-dv
       II.  ==> git push heroku master
    G. Create Configuration Variables in ".env" in Heroku:
       I. Access Application Setting and add necessary variables.
          a. KEY:   DATABASE_URL
          b. VALUE: Value generated by step 11.B.II.
    H. Application Production URL in Heroku (CAN BE FOUND IN SETTINGS SECTION):
       I. URL: "https://mybrary-dv.herokuapp.com/"
11. Creating a Cluster (Database) using mongoDB to be used by Heroku Production Application:
    A. Access URL "https://cloud.mongodb.com/user#/atlas/login" and login.
    B. Leave all options as they are and hit "Create"
       I.  After Cluster has been created click on "Connect" button in order to Create a 
           MongoDB User.  Save the user-name and password, will need them in following step.
       II. Click on "Choose a connection method" and select "Connect Your Application" which
           should provide a connection string for the MongoDB Cluster.
           a. EX: mongodb+srv://user:<password>@cluster0-7hkfw.mongodb.net/test?retryWrites=true&w=majority
           b. Replace "<password>" with the password created in previous step.

**********************************************************************************
Author's Index/Create/New Routes - Node.js/Express/MongoDB Course #2
URL: "https://www.youtube.com/watch?v=esy4nRuShl8"
**********************************************************************************
In this video we will be setting up the author's Index/Create/New routes. To do this 
we will need to:
1. Create an author model
2. Create an author controller
3. Create author views
4. Interact with our database to find and create authors
5. Handle validation errors
6. Setup a shared page header
**********************************************************************************
01. Explanation of Project Files:
    A. "routes/author.js":          Where all AUTHOR application routes get defined.
    B. "views/partials/header.ejs": Partial View for HEADER HTML of ALL Views.
    C. "views/authors/index.ejs":   View for ALL Authors.
    D. "views/authors/new.ejs":     View for SINGLE Author.
    E. "models/author.js":          Model (Database Schema) for Authors.
02. Install "body-parser" Package:
    A. ==> npm install body-parser
       I. Node.js body parsing middleware.  Parse incoming request bodies in a middleware 
          before your handlers, available under the req.body property.
03. Commit Changes to GitHub (Might need to sign in to GitHub account):
    A. ==> 'git add .'
    B. ==> git commit -m "Initial Author Routes"
    C. ==> git push
04. Push new version of application to Heroku:
    A. ==> git push heroku master
05. Whitelist your connection IP address in MongoDB website
    A. Access "Network Access" for database
    B. Add an IP Address 
       I. 0.0.0/0 (Opened to all IP Addresses)
06. Restart all dynos in Heroku server:
    A. Access "More" ==> "Restart all dynos"

**********************************************************************************
Books Index/Create/New Routes - Node.js/Express/MongoDB Course #3
URL: "https://www.youtube.com/watch?v=Zi2UwhpooF8"
**********************************************************************************
In this video we will be setting up the book's Index/Create/New routes. To do this 
we will need to:
1. Create a book model
2. Create a book controller
3. Create book views
4. Interact with our database to find and create books
5. Handle validation errors
6. Setup file upload
7. Store uploaded files
**********************************************************************************
01. Explanation of Project Files:
    A. "routes/book.js":            Where all book application routes get defined.
    B. "views/partials/header.ejs": Partial View for HEADER HTML of ALL Views.
    C. "views/books/index.ejs":     View for ALL Books.
    D. "views/books/new.ejs":       View for SINGLE Books.
    E. "models/book.js":            Model (Database Schema) for Books.
02. Install "multer" Package:
    A. ==> npm install multer
       I. Multer is a node.js middleware for handling multipart/form-data, which is primarily 
          used for uploading files. It is written on top of busboy for maximum efficiency.
          NOTE: Multer will not process any form which is not multipart (multipart/form-data).
03. Commit Changes to GitHub (Might need to sign in to GitHub account):
    A. ==> 'git add .'
    B. ==> git commit -m "Books Create/Index/New"
    C. ==> git push
04. Push new version of application to Heroku:
    A. ==> git push heroku master
05. SPECIAL NOTE:
    A. In Heroku server all uploaded images get deleted after dynos get restarted.
       In following tutorial will address and fix the issue.

**********************************************************************************
File Upload Setup - Node.js/Express/MongoDB Course #4
URL: "https://www.youtube.com/watch?v=Xm5MzWvklbI"
**********************************************************************************
In this video we will be improving the file upload process by:
1. Implementing FilePond
2. Adding a file upload preview
3. Implementing drag and drop upload
4. Storing files in the database for Heroku
**********************************************************************************
01. Using FilePond: A JavaScript library that can upload anything you throw at it, 
    optimizes images for faster uploads, and offers a great, accessible, silky smooth 
    user experience. URL: "https://github.com/pqina/filepond"
    A. Access "https://pqina.nl/filepond/docs/patterns/installation/" for "FilePond" 
       installation instructions.
       I.   CSS library:        <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
       II.  JavaScript library: <script defer src="https://unpkg.com/filepond/dist/filepond.js"></script>
       III. Access libraries in "layouts/layout.ejs" file.
       IV.  NOTE: Make sure "FilePond" JavaScript library is the last one defined in 
                  the HTML file, after plugins javascript libraries (VERY IMPORTANT).
    B. Access "https://pqina.nl/filepond/docs/patterns/plugins/file-encode/" for 
       "File Encode" Plugin installation instructions.
       I.   JavaScript library: <script defer src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>
       II.  Access library in "layouts/layout.ejs" file.
    C. Access "https://pqina.nl/filepond/docs/patterns/plugins/image-preview/" for 
       "Image Preview" Plugin installation instructions.
       I.   CSS library:        <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
       II.  JavaScript library: <script defer src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
       III. Access libraries in "layouts/layout.ejs" file.
    D. Access "https://pqina.nl/filepond/docs/patterns/plugins/image-resize/" for 
       "Image Resize" Plugin installation instructions.
       I.   JavaScript library: <script defer src="https://unpkg.com/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"></script>
       II.  Access libraries in "layouts/layout.ejs" file.
    E. Add "filepond" class to all elements that you want to be parsed by "FilePond" library:
       I.   Example: "<input type="file" class='filepond'>"
    F. Access "https://pqina.nl/filepond/docs/patterns/api/filepond-instance/" for 
       Instructions on how to change the STYLE of "FilePond" drop area:
       I.   "stylePanelAspectRatio": Set a forced aspect ratio for the FilePond drop 
            area. Useful to make the drop area take up a fixed amount of space. For 
            example when cropping a single square image. Accepts human readable aspect 
            ratios like '1:1' or numeric aspect ratios like 0.75.
       II.  "imageResizeTargetWidth": The output width in pixels, if null will use value 
            of imageResizeTargetHeight
       III. "imageResizeTargetHeight": The output height in pixels, if null will use 
            value of imageResizeTargetWidth
02. Uninstall "multer" Package, no longer used:
    A. ==> npm uninstall multer
03. Commit Changes to GitHub (Might need to sign in to GitHub account):
    A. ==> 'git add .'
    B. ==> git commit -m "File Upload Database"
    C. ==> git push
04. Push new version of application to Heroku:
    A. ==> git push heroku master
05. SPECIAL NOTE:
    A. In Heroku server all uploaded images get deleted after dynos get restarted.
       Now saving images in database in binary format, dynos issue has been fixed.

**********************************************************************************
Authors Show/Edit/Update/Delete Routes - Node.js/Express/MongoDB Course #5
URL: "https://youtu.be/UIf1Lh9OZ-k"
**********************************************************************************
In this video we will be setting up the author's Show/Edit/Update/Delete routes. To do this 
we will need to:
1. Add routes to the author's controller
2. Add views for the author's views
3. Add data validation checks for deletion
4. Create a delete form
5. Interact with our database to update and delete authors
6. Finish the navigation for authors in our views
**********************************************************************************
01. Install "method-override" Package:
    A. ==> npm install method-override
       I. Lets you use HTTP verbs such as PUT or DELETE in places where the client doesn't 
          support it.
    B. ==> Add reference in "server.js"
02. Commit Changes to GitHub (Might need to sign in to GitHub account):
    A. ==> 'git add .'
    B. ==> git commit -m "Finished Author Routes"
    C. ==> git push
03. Push new version of application to Heroku:
    A. ==> git push heroku master
          
**********************************************************************************
Finish Backend - Node.js/Express/MongoDB Course #6
URL: "https://www.youtube.com/watch?v=GtTolway2H0"
**********************************************************************************
In this video we will be finishing the backed of the project by setting up the book's 
Show/Edit/Update/Delete routes. To do this we will need to:
1. Add routes to the book's controller
2. Add views for the book's views
3. Interact with our database to update and delete books
4. Finish the navigation for books in our views
5. Polish our backend code and views
**********************************************************************************
01. Commit Changes to GitHub (Might need to sign in to GitHub account):
    A. ==> 'git add .'
    B. ==> git commit -m "Finished Book Routes"
    C. ==> git push
02. Push new version of application to Heroku:
    A. ==> git push heroku master
