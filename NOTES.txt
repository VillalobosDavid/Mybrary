MongoDB Atlas:           https://mbsy.co/mongodb/46535922.  
How To Install Node.js:  https://youtu.be/VShtPwEkDD0
How To Install MongoDB:  https://youtu.be/wcx3f0eUiAw
Learn Git In 20 Minutes: https://youtu.be/IHaTbJPdB-s

Project Setup - Node.js/Express/MongoDB Course #1:
URL: "https://www.youtube.com/watch?v=qj2oDkvc4dQ"

01. Initialize Project:
    A. ==> init npm
02. Install Required Packages:
    A. ==> npm install express              (for server)
       I. Fast, un-opinionated, minimalist web framework for node.
    B. ==> npm install ejs                  (for template language)
       I. Embedded JavaScript templates.
    C. ==> npm install express-ejs-layouts  (for creating HTML Layouts)
       I. Layout support for "ejs" (Embedded JavaScript templates) in express.
03. Install Development Packages:
    A. ==> npm install --save-dev nodemon   (for refreshing server)
       I. "nodemon" is a tool that helps develop node.js based applications by automatically 
          restarting the node application when file changes in the directory are detected.
04. Modify "package.json" to create scripts to run servers:
    A."start": "node server.js"             (for Production Running)
    B."devStart": "nodemon server.js"       (for Development Running)
05. Running server:
    A. ==> npm run start                    (for Production Running)
    B. ==> npm run devStart                 (for Development Running)
06. Explanation of Project Folders:
    A. "public" folder where all PUBLIC           files will be stored.
    B. "views"  folder where all VIEW             files will be stored.
    C. "routes  folder where all ROUTE/CONTROLLER files will be stored.
    D. "models  folder where all DATABASE MODEL   files will be stored.
07. Explanation of Project Files:
    A. "server.js":                 Entry point of application.
    B. "routes/index.js":           Where all the application routes get defined.
    C. "views/layouts/layout.ejs":  Boiler plate HTML for ALL Pages in Application. 
                                   (Other pages will get Rendered in "<%- body %>" Element).
08. Install MongoDB Package:
    "Mongoose" is a MongoDB object modeling tool designed to work in an asynchronous environment.
    Mongoose supports both promises and callbacks.
    A. ==> npm install mongoose
    B. IMPORTANT: URL for local Mongoose Database "127.0.0.1:27017"
09. Install Dotenv Development Package:
    "Dotenv" is a zero-dependency module that loads environment variables from a .env file into 
    process.env. Storing configuration in the environment separate from code is based on The 
    Twelve-Factor App methodology.
    A. ==> npm install --save-dev dotenv
    B. Create a ".env" file in ROOT Directory.
10. Initialize Git Repository for Project:
    A. ==> git init
    B. Create a ".gitignore" file to declare all files and directories that DO NOT want be included
       by Git when saving project to repository.



