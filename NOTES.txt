How To Install Node.js:  https://youtu.be/VShtPwEkDD0
How To Install MongoDB:  https://youtu.be/wcx3f0eUiAw
Learn Git In 20 Minutes: https://youtu.be/IHaTbJPdB-s

LOCAL-PC ==> GitHub Server ==> Heroku Server ==> MongoDB Server
1. LOCAL-PC:       Development Environment.
2. GitHub Server:  Repository Server.
3. Heroku Server:  Web Server.
4. MongoDB Server: Non-SQL Database Server.

**********************************************************************************
Project Setup - Node.js/Express/MongoDB Course #1:
URL: "https://www.youtube.com/watch?v=qj2oDkvc4dQ"
**********************************************************************************

01. Initialize Project:
    A. ==> init npm
02. Install Required Packages:
    A. ==> npm install express              (server)
       I. Fast, un-opinionated, minimalist web framework for node.
    B. ==> npm install ejs                  (template language)
       I. Embedded JavaScript templates.
    C. ==> npm install express-ejs-layouts  (for creating HTML Layouts)
       I. Layout support for "ejs" (Embedded JavaScript templates) in express.
03. Install Development Packages:
    A. ==> npm install --save-dev nodemon   (for refreshing server)
       I. "nodemon" is a tool that helps develop node.js based applications by automatically 
          restarting the node application when file changes in the directory are detected.
04. Modify "package.json" to create scripts to run servers:
    A."start": "node server.js"             (for Production Running)
    B."devStart": "nodemon server.js"       (for Development Running)
05. Running server:
    A. ==> npm run start                    (for Production Running)
    B. ==> npm run devStart                 (for Development Running)
06. Explanation of Project Folders:
    A. "public" folder where all PUBLIC           files will be stored.
    B. "views"  folder where all VIEW             files will be stored.
    C. "routes  folder where all ROUTE/CONTROLLER files will be stored.
    D. "models  folder where all DATABASE MODEL   files will be stored.
07. Explanation of Project Files:
    A. "server.js":                 Entry point of application.
    B. "routes/index.js":           Where all DEFAULT application routes get defined.
    C. "views/layouts/layout.ejs":  Boiler plate HTML for ALL Pages in Application. 
                                   (Other pages will get Rendered in "<%- body %>" Element).
08. Install MongoDB Package:
    "Mongoose" is a MongoDB object modeling tool designed to work in an asynchronous environment.
    Mongoose supports both promises and callbacks.
    A. ==> npm install mongoose
    B. IMPORTANT: URL for local Mongoose Database "127.0.0.1:27017"
09. Install Dotenv Development Package:
    "Dotenv" is a zero-dependency module that loads environment variables from a .env file into 
    process.env. Storing configuration in the environment separate from code is based on The 
    Twelve-Factor App methodology.
    A. ==> npm install --save-dev dotenv
    B. Create a ".env" file in ROOT Directory and create entrie(s).
       I. DATABASE_URL = "mongodb://127.0.0.1:27017/mybrary"
10. Initialize Git Repository for Project:
    A. ==> git init (Create an empty Git repository or reinitialize an existing one)
    B. Create a ".gitignore" file to declare all files and directories that DO NOT want be 
       included when saving project to repository.
    C. ==> 'git add .' (Add file contents to the index)
    D. ==> git commit -m "Commit-Comment" (Record changes to the repository)
    E. Go to GitHub and create a new repository for the project, call it "Mybrary".
    D. Push an existing repository from the command line
       ==> git remote add origin https://github.com/VillalobosDavid/Mybrary.git
       ==> git push -u origin master
10. Creating and Uploading Project to Heroku:
    A. Create New App in Heroku website
       I. Called it "mybrary-dv"
    B. Install the Heroku CLI (Follow instructions in website)
       I. URL: https://devcenter.heroku.com/articles/heroku-cli#download-and-install
    C. log in to your Heroku account and follow the prompts to create a new SSH public key.
       I.   ==> heroku login
    D. Create a new Git repository (If Necessary)
       I.   ==> cd my-project/                      (DONE IN STEP 10)
       II.  ==> git init                            (DONE IN STEP 10)
       III. ==> heroku git:remote -a mybrary-dv
    E. Deploy your application
       I.   ==> 'git add .'                         (DONE IN STEP 10)
       II.  ==> git commit -am "make it better"     (DONE IN STEP 10)
       III. ==> git push heroku master
    F. Existing Git repository (For existing repositories, simply add the heroku remote)
       I.   ==> heroku git:remote -a mybrary-dv
       II.  ==> git push heroku master
    G. Create Configuration Variables in ".env" in Heroku:
       I. Access Application Setting and add necessary variables.
          a. KEY:   DATABASE_URL
          b. VALUE: Value generated by step 11.B.II.
    H. Application Production URL in Heroku (CAN BE FOUND IN SETTINGS SECTION):
       I. URL: "https://mybrary-dv.herokuapp.com/"
11. Creating a Cluster (Database) using mongoDB to be used by Heroku Production Application:
    A. Access URL "https://cloud.mongodb.com/user#/atlas/login" and login.
    B. Leave all options as they are and hit "Create"
       I.  After Cluster has been created click on "Connect" button in order to Create a 
           MongoDB User.  Save the user-name and password, will need them in following step.
       II. Click on "Choose a connection method" and select "Connect Your Application" which
           should provide a connection string for the MongoDB Cluster.
           a. EX: mongodb+srv://user:<password>@cluster0-7hkfw.mongodb.net/test?retryWrites=true&w=majority
           b. Replace "<password>" with the password created in previous step.

**********************************************************************************
Author's Index/Create/New Routes - Node.js/Express/MongoDB Course #2
URL: "https://www.youtube.com/watch?v=esy4nRuShl8"
**********************************************************************************
01. Explanation of Project Files:
    A. "routes/author.js":          Where all AUTHOR application routes get defined.
    B. "views/partials/header.ejs": Partial View for HEADER HTML of ALL Views.
    C. "views/authors/index.ejs":   View for ALL Authors.
    D. "views/authors/new.ejs":     View for SINGLE Author.
    E. "models/author.js":          Model (Database Schema) for Authors.
02. Install "body-parser" Package:
    A. ==> npm install body-parser
       I. Node.js body parsing middleware.  Parse incoming request bodies in a middleware 
          before your handlers, available under the req.body property.


